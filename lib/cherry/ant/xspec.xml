<?xml version="1.0" encoding="UTF-8"?>
<antlib
    xmlns:if="ant:if"
    xmlns:unless="ant:unless"
    xmlns:xspec="http://xylarium.org/ns/ant/macros/utils/xspec">
	
    
    <macrodef
        name="run"
        description="Run an XSpec test file."
        uri="http://xylarium.org/ns/ant/macros/utils/xspec"> 
        
        <attribute name="file" />
    	<attribute name="output-dir" />
    	<attribute name="type" default="xslt" />
    	<attribute name="catalogs" default="" />
    	<attribute name="junit" default="false" />
    	<attribute name="coverage" default="false" />
    	<attribute name="fail-on-error" default="false" />
    	<attribute name="tmp-dir" default="${base.tmp}" />
    	<attribute name="debug" default="false" />
    	
        <sequential>
                       
            <local name="local.test-type" />        	
			<if>
				<or>
					<equals arg1="xslt" arg2="@{type}" casesensitive="false" />
					<equals arg1="t" arg2="@{type}" casesensitive="false" />
				</or>
				<then>
					<property name="local.test-type" value="xslt" />
				</then>
				<else>
					<if>
						<or>
							<equals arg1="schematron" arg2="@{type}" casesensitive="false" />
							<equals arg1="s" arg2="@{type}" casesensitive="false" />
						</or>
						<then>
							<property name="local.test-type" value="schematron" />
						</then>
						<else>
							<if>
								<or>
									<equals arg1="xquery" arg2="@{type}" casesensitive="false" />
									<equals arg1="q" arg2="@{type}" casesensitive="false" />
								</or>
								<then>
									<property name="local.test-type" value="xquery" />
								</then>
								<else>
									<fail message="Unexpected test type: @{type}" />
								</else>
							</if>
						</else>
					</if>
				</else>
			</if>
        	
        	<local name="local.xspec-file.name.standardised-extension" />
        	<if>
        		<equals arg1="xquery" arg2="${local.test-type}" />
        		<then>
        			<property name="local.xspec-file.name.standardised-extension" value="xq" />
        		</then>
        		<else>
        			<property name="local.xspec-file.name.standardised-extension" value="xsl" />
        		</else>        			
        	</if>
        	
        	
        	<local name="local.xspec-file.absolute-path" />
        	<path id="local.xspec-file.absolute-path">
        		<fileset file="@{file}" />
        	</path>
        	
        	<local name="local.xspec-file.name.original-extension" />
        	<pathconvert property="local.xspec-file.name.original-extension" refid="local.xspec-file.absolute-path">			
        		<chainedmapper>        			
        			<regexpmapper from="^.*\.([^\.]*)$" to="\1" handledirsep="true" />
        		</chainedmapper>
        	</pathconvert>    

        	<local name="local.xspec-file.name-without-extension" />
        	<basename property="local.xspec-file.name-without-extension" file="${ant.refid:local.xspec-file.absolute-path}" suffix="${local.xspec-file.name.original-extension}" />
        	        	        	        
       	 <local name="local.xspec-file.compiled" />
        	<property name="local.xspec-file.compiled" location="@{tmp-dir}/${local.xspec-file.name-without-extension}-compiled.${local.xspec-file.name.standardised-extension}" />
        	
        	<local name="local.xspec-file.results" />
        	<property name="local.xspec-file.results" location="@{output-dir}/${local.xspec-file.name-without-extension}-result.xml" />
        	
        	<local name="local.xspec-file.report" />
        	<property name="local.xspec-file.report" location="@{output-dir}/${local.xspec-file.name-without-extension}-result.html" />
        	
        	<local name="local.xspec-file.summary" />
        	<property name="local.xspec-file.summary" location="@{output-dir}/${local.xspec-file.name-without-extension}-result.properties" />
        	
        	<xspec:compile
        		xspec-file="@{file}"
        		result="${local.xspec-file.compiled}"
        		type="${local.test-type}"
        		catalogs="@{catalogs}"
        		fail-on-error="@{fail-on-error}"
        	/>
        	
        	<xspec:evaluate
        		compiled-xspec-file="${local.xspec-file.compiled}"
        		result="${local.xspec-file.results}"
        		catalogs="@{catalogs}"
        		fail-on-error="@{fail-on-error}"
        	/>
        	
        	<xspec:report
        		xspec-results-file="${local.xspec-file.results}"
        		result="${local.xspec-file.report}"
        		fail-on-error="@{fail-on-error}"
        	/>
        	
        	<xspec:summarise
        		xspec-results-xml="${local.xspec-file.results}"
        		xspec-results-html="${local.xspec-file.report}"
        		result="${local.xspec-file.summary}"
        		fail-on-error="@{fail-on-error}"
        	/>
            
        </sequential>		
    </macrodef>		
		
	
	<macrodef
		name="compile"
		description="Compile an XSpec test file."
		uri="http://xylarium.org/ns/ant/macros/utils/xspec"> 
		
		<attribute name="xspec-file" />
		<attribute name="result" />
		<attribute name="type" default="xslt" />
		<attribute name="catalogs" default="" />
		<attribute name="config" default="${xslt.processor.saxon.config.default}" />
		<attribute name="fail-on-error" default="true" />
		<attribute name="debug" default="${debug}" />
				
		<sequential>
	
			<local name="local.compiler" />
			<if>
				<equals arg1="xquery" arg2="@{type}" />
				<then>
					<property name="local.compiler" location="${xspec.compiler.xquery}" />
				</then>
				<else>
					<property name="local.compiler" location="${xspec.compiler.xslt}" />
				</else>
			</if>
			
			<echo message="Compiling tests..." if:true="@{debug}" />
	
			<xspec:xslt
				source="@{xspec-file}"
				stylesheet="${local.compiler}"
				result="@{result}"
				catalogs="@{catalogs}"
				config="@{config}"
				fail-on-error="@{fail-on-error}"
				debug="@{debug}"
			/>
			
			<echo message="...compiling complete.&#10;" if:true="@{debug}" />
			
		</sequential>		
	</macrodef>	


	<macrodef
		name="evaluate"
		description="Execute a compiled XSpec test file."
		uri="http://xylarium.org/ns/ant/macros/utils/xspec"> 
		
		<attribute name="compiled-xspec-file" />
		<attribute name="result" />
		<attribute name="catalogs" default="" />
		<attribute name="config" default="${xslt.processor.saxon.config.default}" />
		<attribute name="fail-on-error" default="true" />
		<attribute name="debug" default="${debug}" />
		
		<sequential>
			
			<echo message="Running tests..." if:true="@{debug}" />
			
			<local name="local.xspec-file.available" />
			<available property="local.xspec-file.available" file="@{compiled-xspec-file}" type="file" />
			<fail message="Compiled XSpec file not found: @{compiled-xspec-file}" unless:true="${local.xspec-file.available}" />
						
			<xspec:xslt
				stylesheet="@{compiled-xspec-file}"
				initial-template="{http://www.jenitennison.com/xslt/xspec}main"
				result="@{result}"
				catalogs="@{catalogs}"
				config="@{config}"
				debug="@{debug}"
			/>
			
			<if>
				<not>
					<available file="@{result}" type="file" />
				</not>
				<then>
					<fail message="...test results not saved." if:true="@{fail-on-error}" />
				</then>
				<else>					
					<trycatch>
						<try>
							<!-- Check that the XML result file is well-formed (if the Java process fails, for example because an input file wasn't found, then XSpec still creates a partial/incomplete XML result file). -->
							<xmlvalidate file="@{result}" lenient="true" failonerror="true" />		
						</try>
						<catch>
							<move file="@{result}" tofile="@{result}.invalid" />
							<echo message="...a valid XML result file isn't available for this XSpec test file." />
							<fail if:true="@{fail-on-error}" />	
						</catch>
					</trycatch>					
				</else>
			</if>			
			
			<echo message="...evaluation complete.&#10;" if:true="@{debug}" />
			
		</sequential>		
	</macrodef>		
		

	<macrodef
		name="report"
		description="Generate a report containing the results of an XSpec test."
		uri="http://xylarium.org/ns/ant/macros/utils/xspec"> 
		
		<attribute name="xspec-results-file" />
		<attribute name="result" />
		<attribute name="catalogs" default="" />
		<attribute name="config" default="${xslt.processor.saxon.config.default}" />
		<attribute name="fail-on-error" default="true" />
		<attribute name="debug" default="${debug}" />
		
		<sequential>
			
			<echo message="Generating a report..." if:true="@{debug}" />
			
			<xspec:xslt
				source="@{xspec-results-file}"
				stylesheet="${xspec.reporter.html}"
				result="@{result}"
				catalogs="@{catalogs}"
				config="@{config}"
				debug="@{debug}"
			/>
			
			<echo message="...reporting complete.&#10;" if:true="@{debug}" />
			
		</sequential>		
	</macrodef>	
    
    
    <macrodef
    	name="summarise"
    	description="Summarise the results of an XSpec test."
    	uri="http://xylarium.org/ns/ant/macros/utils/xspec">
    	
    	<attribute name="xspec-results-xml" />
    	<attribute name="xspec-results-html" />
    	<attribute name="result" />
    	<attribute name="fail-on-error" default="true" />
    	
    	<sequential>

	    	<xspec:xslt
	    		source="@{xspec-results-xml}"
	    		stylesheet="${xspec.reporter.summary}"
	    		result="@{xspec-results-xml}"
	    	/>
    		
    		<xspec:xslt
    			source="@{xspec-results-xml}"
    			stylesheet="${xspec.reporter.properties}"
    			result="@{result}"
    		/>
    		
    		<local name="local.xspec.passed" />
    		<local name="local.xspec.pending" />
    		<local name="local.xspec.failed" />
    		<local name="local.xspec.total" />
    		<local name="local.xspec.status" />
    		<xmlproperty
    			file="@{result}"
    			keeproot="true"
    			prefix="local"
    			collapseattributes="true"
    			semanticattributes="true"
    		/>	
    		
    		<local name="local.uri.report" />			
    		<makeurl property="local.uri.report" file="@{xspec-results-html}" validate="false" />
	    	
	    	<echo />
    		<echo>passed: ${local.xspec.passed} / pending: ${local.xspec.pending} / failed: ${local.xspec.failed} /  total: ${local.xspec.total}</echo>
    		<echo message="See ${local.uri.report} for a report." />
    		<echo message="=#==============================#="/>
    		<if>
    			<and>
    				<equals arg1="true" arg2="@{fail-on-error}" />
    				<equals arg1="failed" arg2="${local.xspec.status}" />
    			</and>
    			<then>
    				<fail message="XSpec tests failed." />
    			</then>
    		</if>    		
    	</sequential>
    </macrodef>
    
    
	<macrodef
		name="xslt"
		description="Transform an XSLT XSpec test file."
		uri="http://xylarium.org/ns/ant/macros/utils/xspec"> 
		
		<attribute name="source" default="" />
		<attribute name="stylesheet" />
		<attribute name="result" />
		<attribute name="initial-template" default="" />
		<attribute name="catalogs" default="" />
		<attribute name="config" default="${xslt.processor.saxon.config.default}" />
		<attribute name="fail-on-error" default="true" />
		<attribute name="quit" default="on" />
		<attribute name="debug" default="${debug}" />
		
		<sequential>
			
			<echo message="XSLT Transformation:&#10;" if:true="@{debug}" />
			<echo message="            input: @{source}&#10;" unless:blank="@{source}" if:true="@{debug}" />
			<echo message="       stylesheet: @{stylesheet}" unless:blank="@{stylesheet}" if:true="@{debug}" />
			<echo message=" initial template: @{initial-template}" unless:blank="@{initial-template}" if:true="@{debug}" />
			<echo message="         catalogs: @{catalogs}" unless:blank="@{catalogs}" if:true="@{debug}" />
			
			<local name="local.error" />			
			<trycatch>
				
				<try>
					<java classname="net.sf.saxon.Transform" fork="true" errorproperty="local.error" failonerror="true">
						<classpath>
							<pathelement location="${resource-resolution.resolver.xml-commons}" />
							<pathelement location="${xslt.processor.saxon}" />
							<pathelement location="${java.class.path}" />
						</classpath>
						
						<arg line="-s:@{source}" unless:blank="@{source}" />
						<arg line="-xsl:@{stylesheet}" />
						<arg line="-it:@{initial-template}" unless:blank="@{initial-template}" />				
						<arg line="-o:@{result}" />
						<arg line="-catalog:@{catalogs}" unless:blank="@{catalogs}" />	
						<arg line="-config:@{config}" />
						<arg line="-quit:@{quit}" />						
					</java>					
				</try>
				
				<catch>
					<if>
						<equals arg1="false" arg2="@{fail-on-error}" />
						<then>
							<echo message="${local.error}" />
						</then>
						<else>
							<fail message="${local.error}" />	
						</else>
					</if>					
				</catch>
				
			</trycatch>
			
			<echo message="...transformation complete.&#10;" if:true="@{debug}" />
			
		</sequential>
	</macrodef>
    
    
</antlib>